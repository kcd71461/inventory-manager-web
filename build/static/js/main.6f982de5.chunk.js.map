{"version":3,"sources":["theme.tsx","components/NumberInput.tsx","components/InventoryTable.tsx","localStorage.tsx","containers/InventoryPage.tsx","containers/SettingPage.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["theme","createTheme","typography","fontFamily","overrides","MuiTableCell","sizeSmall","padding","stickyHeader","fontSize","MuiOutlinedInput","input","paddingLeft","paddingRight","inputMarginDense","paddingTop","paddingBottom","adornedEnd","MuiInputAdornment","positionEnd","marginLeft","NumberInput","id","value","onChange","allowNegative","unit","className","IconButton","color","size","disabled","isNaN","onClick","FormControl","fullWidth","OutlinedInput","inputProps","type","e","parseInt","target","onBlur","endAdornment","InputAdornment","position","undefined","DND_ITEM_TYPE","InventoryTableRow","row","index","moveRow","onCellChange","allowReordering","allowRowDelete","onDeleteRow","dropRef","React","useRef","dragRef","useDrop","accept","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","drop","useDrag","collect","isDragging","drag","opacity","preview","TableRow","ref","style","TableCell","cells","map","cell","column","getCellProps","data","TableEditCell","getUnit","editType","newValue","render","InventoryTable","columns","getRowId","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","dragRecord","update","$splice","tableProps","options","HTML5toTouch","Table","clsx","TableHead","headerGroup","getHeaderGroupProps","width","align","headers","getHeaderProps","columnAlign","TableBody","getRowProps","accessor","$set","LocalStorage","_products","_productInventories","productsJson","window","localStorage","getItem","KEY_PRODUCTS","parsed","JSON","parse","this","error","alert","productInventoriesJson","KEY_PRODUCT_INVENTORIES","filterProductInventories","setItem","stringify","products","save","productInventories","product","newInventory","prevInventory","find","inv","remainCount","requiredCount","observer","show","useState","name","company","setData","clipboardModalOpen","setClipboardModalOpen","copySnackbarOpen","setCopySnackbarOpen","useEffect","toString","Header","original","saveProductInventories","ButtonGroup","variant","Button","startIcon","newData","Modal","open","onClose","Paper","CompanyClipboardList","onCloseRequest","showSnackbar","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","action","Fragment","companies","reduce","prevValue","companyInventoreis","inventories","push","List","subheader","ListSubheader","component","key","ListItem","button","length","copy","join","ListItemText","primary","secondary","$push","Date","now","saveProducts","tabs","title","icon","DataUsageIcon","InventoryPage","SettingsIcon","SettingPage","App","selectedTab","setSelectedTab","ThemeProvider","tab","elevation","BottomNavigation","showLabels","Icon","BottomNavigationAction","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f982de5.chunk.js","sourcesContent":["import { createTheme } from \"@material-ui/core\";\r\n\r\nconst theme = createTheme({\r\n  typography: {\r\n    fontFamily: \"Noto Sans KR, Roboto, sans-serif\",\r\n  },\r\n  overrides: {\r\n    MuiTableCell: {\r\n      sizeSmall: {\r\n        padding: \"3px\",\r\n      },\r\n      stickyHeader: {\r\n        padding: \"6px\",\r\n        fontSize: \"1.1rem\",\r\n      },\r\n    },\r\n    MuiOutlinedInput: {\r\n      input: {\r\n        paddingLeft: 5,\r\n        paddingRight: 5,\r\n      },\r\n      inputMarginDense: {\r\n        paddingTop: 8,\r\n        paddingBottom: 8,\r\n      },\r\n      adornedEnd: {\r\n        paddingRight: 5,\r\n      },\r\n    },\r\n    MuiInputAdornment: {\r\n      positionEnd: {\r\n        marginLeft: 4,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nexport default theme;\r\n","import { FormControl, IconButton, InputAdornment, OutlinedInput, TextField } from \"@material-ui/core\";\r\nimport React, { ReactElement } from \"react\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\nimport \"./NumberInput.scss\";\r\ninterface Props {\r\n  id?: string;\r\n  value: number;\r\n  onChange?: (newNumber: number) => void;\r\n  allowNegative?: boolean;\r\n  unit?: string;\r\n}\r\n\r\nexport default function NumberInput({ id, value, onChange, allowNegative = false, unit }: Props): ReactElement {\r\n  return (\r\n    <div className=\"number-input\">\r\n      <IconButton color=\"primary\" size=\"small\" disabled={!allowNegative && (value <= 0 || isNaN(value))} onClick={() => onChange?.(value - 1)}>\r\n        <RemoveIcon />\r\n      </IconButton>\r\n      <FormControl fullWidth size=\"small\">\r\n        <OutlinedInput\r\n          inputProps={{ className: \"text-align-center\" }}\r\n          id={id}\r\n          value={value}\r\n          type=\"number\"\r\n          onChange={(e) => {\r\n            onChange?.(parseInt(e.target.value));\r\n          }}\r\n          fullWidth\r\n          onBlur={() => {\r\n            if (isNaN(value)) {\r\n              onChange?.(0);\r\n            }\r\n          }}\r\n          endAdornment={unit ? <InputAdornment position=\"end\">{unit}</InputAdornment> : undefined}\r\n        />\r\n      </FormControl>\r\n      {/* <TextField\r\n        inputProps={{ className: \"text-align-center\" }}\r\n        id={id}\r\n        value={value}\r\n        type=\"number\"\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        onChange={(e) => {\r\n          onChange?.(parseInt(e.target.value));\r\n        }}\r\n        fullWidth\r\n        onBlur={() => {\r\n          if (isNaN(value)) {\r\n            onChange?.(0);\r\n          }\r\n        }}\r\n      /> */}\r\n      <IconButton color=\"primary\" size=\"small\" onClick={() => onChange?.(value + 1)}>\r\n        <AddIcon />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Cell, Column, Row, useTable } from \"react-table\";\r\nimport { useDrag, useDrop } from \"react-dnd\";\r\nimport { DndProvider } from \"react-dnd-multi-backend\";\r\nimport HTML5toTouch from \"react-dnd-multi-backend/dist/esm/HTML5toTouch\";\r\nimport update from \"immutability-helper\";\r\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { IconButton, Table, TableRow, TableHead, TableBody, TableCell, TextField, FormControl, Input, InputAdornment, OutlinedInput } from \"@material-ui/core\";\r\nimport NumberInput from \"./NumberInput\";\r\nimport clsx from \"clsx\";\r\n\r\nexport type InventoryTableColumn<T extends object> = {\r\n  editType?: \"string\" | \"select\" | \"toggle\" | \"number\";\r\n  columnAlign?: \"center\" | \"right\";\r\n  getUnit?: (cell: Cell<T, any>) => string;\r\n} & Column<T>;\r\n\r\ninterface Props<T extends object> {\r\n  className?: string;\r\n  columns: InventoryTableColumn<T>[];\r\n  data: T[];\r\n  onChange?: (newData: T[]) => void;\r\n  getRowId: (data: T) => string;\r\n  allowRowDelete?: boolean;\r\n  allowReordering?: boolean;\r\n}\r\n\r\nconst InventoryTable = <T extends object>({ className, columns, data, getRowId, onChange, allowRowDelete = true, allowReordering = true }: Props<T>) => {\r\n  // const [records, setRecords] = React.useState<T[]>(data);\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable<T>({\r\n    data,\r\n    columns,\r\n    getRowId,\r\n  });\r\n\r\n  const moveRow = (dragIndex: number, hoverIndex: number) => {\r\n    const dragRecord = data[dragIndex];\r\n    onChange?.(\r\n      update(data, {\r\n        $splice: [\r\n          [dragIndex, 1],\r\n          [hoverIndex, 0, dragRecord],\r\n        ],\r\n      })\r\n    );\r\n  };\r\n\r\n  const tableProps = getTableProps();\r\n  return (\r\n    <DndProvider options={HTML5toTouch}>\r\n      <Table {...tableProps} size=\"small\" stickyHeader className={clsx(tableProps.className, className)}>\r\n        <TableHead>\r\n          {headerGroups.map((headerGroup) => (\r\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n              {allowReordering && <TableCell width={10} align=\"center\"></TableCell>}\r\n              {headerGroup.headers.map((column) => (\r\n                <TableCell {...column.getHeaderProps()} align={(column as InventoryTableColumn<T>).columnAlign}>\r\n                  {column.render(\"Header\")}\r\n                </TableCell>\r\n              ))}\r\n              {allowRowDelete && <TableCell width={10} align=\"center\"></TableCell>}\r\n            </TableRow>\r\n          ))}\r\n        </TableHead>\r\n        <TableBody {...getTableBodyProps()}>\r\n          {rows.map((row, index) => {\r\n            prepareRow(row);\r\n            return (\r\n              <InventoryTableRow\r\n                index={index}\r\n                row={row}\r\n                moveRow={moveRow}\r\n                {...row.getRowProps()}\r\n                allowReordering={allowReordering}\r\n                allowRowDelete={allowRowDelete}\r\n                onCellChange={(accessor, value) => {\r\n                  onChange?.(update(data as any, { [index]: { [accessor]: { $set: value } } }));\r\n                }}\r\n                onDeleteRow={() => onChange?.(update(data, { $splice: [[index, 1]] }))}\r\n              />\r\n            );\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </DndProvider>\r\n  );\r\n};\r\n\r\nconst DND_ITEM_TYPE = \"row\";\r\n\r\nconst InventoryTableRow = <T extends object>({\r\n  row,\r\n  index,\r\n  moveRow,\r\n  onCellChange,\r\n  allowReordering,\r\n  allowRowDelete,\r\n  onDeleteRow,\r\n}: {\r\n  row: Row<T>;\r\n  index: number;\r\n  moveRow: (dragIndex: number, hoverIndex: number) => void;\r\n  onCellChange?: (accessor: keyof T, value: any) => void;\r\n  allowReordering?: boolean;\r\n  allowRowDelete?: boolean;\r\n  onDeleteRow?: () => void;\r\n}) => {\r\n  const dropRef = React.useRef<HTMLTableRowElement>(null);\r\n  const dragRef = React.useRef<HTMLTableCellElement>(null);\r\n\r\n  const [, drop] = useDrop({\r\n    accept: DND_ITEM_TYPE,\r\n    hover(item: any, monitor: any) {\r\n      if (!dropRef.current) {\r\n        return;\r\n      }\r\n      const dragIndex = item.index;\r\n      const hoverIndex = index;\r\n      // Don't replace items with themselves\r\n      if (dragIndex === hoverIndex) {\r\n        return;\r\n      }\r\n      // Determine rectangle on screen\r\n      const hoverBoundingRect = dropRef!.current!.getBoundingClientRect();\r\n      // Get vertical middle\r\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\r\n      // Determine mouse position\r\n      const clientOffset = monitor.getClientOffset();\r\n      // Get pixels to the top\r\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\r\n      // Only perform the move when the mouse has crossed half of the items height\r\n      // When dragging downwards, only move when the cursor is below 50%\r\n      // When dragging upwards, only move when the cursor is above 50%\r\n      // Dragging downwards\r\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\r\n        return;\r\n      }\r\n      // Dragging upwards\r\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\r\n        return;\r\n      }\r\n      // Time to actually perform the action\r\n      moveRow(dragIndex, hoverIndex);\r\n      // Note: we're mutating the monitor item here!\r\n      // Generally it's better to avoid mutations,\r\n      // but it's good here for the sake of performance\r\n      // to avoid expensive index searches.\r\n      item.index = hoverIndex;\r\n    },\r\n  });\r\n\r\n  const [{ isDragging }, drag, preview] = useDrag({\r\n    type: DND_ITEM_TYPE,\r\n    item: { type: DND_ITEM_TYPE, index },\r\n    collect: (monitor) => ({\r\n      isDragging: monitor.isDragging(),\r\n    }),\r\n  });\r\n\r\n  const opacity = isDragging ? 0.5 : 1;\r\n\r\n  preview(drop(dropRef));\r\n  drag(dragRef);\r\n  return (\r\n    <TableRow ref={dropRef} style={{ opacity }}>\r\n      {allowReordering && (\r\n        <TableCell ref={dragRef}>\r\n          <IconButton size=\"small\">\r\n            <DragHandleIcon />\r\n          </IconButton>\r\n        </TableCell>\r\n      )}\r\n      {row.cells.map((cell) => {\r\n        const column = cell.column as InventoryTableColumn<T>;\r\n        return (\r\n          <TableCell {...cell.getCellProps()}>\r\n            <TableEditCell\r\n              cell={cell}\r\n              onChange={(data) => {\r\n                onCellChange?.(column.id as keyof T, data);\r\n              }}\r\n            />\r\n          </TableCell>\r\n        );\r\n      })}\r\n      {allowRowDelete && (\r\n        <TableCell>\r\n          <IconButton size=\"small\" color=\"secondary\" onClick={onDeleteRow}>\r\n            <DeleteIcon />\r\n          </IconButton>\r\n        </TableCell>\r\n      )}\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nconst TableEditCell = <T extends object>({ cell, onChange }: { cell: Cell<T, any>; onChange?: (data: any) => void }) => {\r\n  const column = cell.column as InventoryTableColumn<T>;\r\n  const { value } = cell;\r\n  const unit = column.getUnit ? column.getUnit(cell) : undefined;\r\n  switch (column.editType) {\r\n    case \"string\":\r\n      return (\r\n        <FormControl fullWidth size=\"small\">\r\n          <OutlinedInput\r\n            fullWidth\r\n            value={value}\r\n            onChange={(e) => onChange?.(e.target.value)}\r\n            endAdornment={unit ? <InputAdornment position=\"end\">{unit}</InputAdornment> : undefined}\r\n          />\r\n        </FormControl>\r\n      );\r\n    case \"number\":\r\n      return <NumberInput value={value} onChange={(newValue) => onChange?.(newValue)} unit={unit} />;\r\n    default:\r\n      return <>{cell.render(\"Cell\")}</>;\r\n  }\r\n};\r\n\r\nexport default InventoryTable;\r\n","import { makeAutoObservable } from \"mobx\";\r\n\r\nexport interface Product {\r\n  id: number; // 생성 Time\r\n  name: string;\r\n  company: string;\r\n  unit: string;\r\n  show: boolean;\r\n}\r\n\r\nexport class ProductInventory {\r\n  product: Product;\r\n  requiredCount: number;\r\n  remainCount: number;\r\n\r\n  constructor(product: Product, requiredCount: number = 0, remainCount: number = 0) {\r\n    this.product = product;\r\n    this.requiredCount = requiredCount;\r\n    this.remainCount = remainCount;\r\n    makeAutoObservable(this);\r\n  }\r\n}\r\n\r\nclass LocalStorage {\r\n  private _products: Product[] = [];\r\n  public get products(): Product[] {\r\n    return this._products;\r\n  }\r\n\r\n  private _productInventories: ProductInventory[] = [];\r\n  public get productInventories(): ProductInventory[] {\r\n    return this._productInventories;\r\n  }\r\n\r\n  private static KEY_PRODUCTS = \"products\";\r\n  private static KEY_PRODUCT_INVENTORIES = \"product_inventories\";\r\n\r\n  constructor() {\r\n    const productsJson = window.localStorage.getItem(LocalStorage.KEY_PRODUCTS);\r\n    if (productsJson) {\r\n      try {\r\n        const parsed = JSON.parse(productsJson) as Product[];\r\n        this._products = parsed;\r\n      } catch (error) {\r\n        window.alert(\"등록 아이템을 불러오는 데 실패했습니다.\\n등록 아이템이 초기화 됩니다.\");\r\n        return;\r\n      }\r\n    }\r\n    const productInventoriesJson = window.localStorage.getItem(LocalStorage.KEY_PRODUCT_INVENTORIES);\r\n    if (productInventoriesJson) {\r\n      try {\r\n        const parsed = JSON.parse(productInventoriesJson) as ProductInventory[];\r\n        this._productInventories = parsed;\r\n      } catch (error) {\r\n        window.alert(\"등록 아이템을 불러오는 데 실패했습니다.\\n등록 아이템이 초기화 됩니다.\");\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.filterProductInventories();\r\n    window.localStorage.setItem(LocalStorage.KEY_PRODUCTS, JSON.stringify(this._products));\r\n    window.localStorage.setItem(LocalStorage.KEY_PRODUCT_INVENTORIES, JSON.stringify(this._productInventories));\r\n  }\r\n\r\n  saveProducts(products: Product[]) {\r\n    this._products = products;\r\n    this.save();\r\n  }\r\n\r\n  saveProductInventories(productInventories: ProductInventory[]) {\r\n    this._productInventories = productInventories;\r\n    this.filterProductInventories();\r\n    window.localStorage.setItem(LocalStorage.KEY_PRODUCT_INVENTORIES, JSON.stringify(this._productInventories));\r\n  }\r\n\r\n  filterProductInventories() {\r\n    if (JSON.stringify(this._productInventories.map((item) => item.product)) !== JSON.stringify(this._products)) {\r\n      const newInventory = this._products.map((product) => {\r\n        const prevInventory = this._productInventories.find((inv) => inv.product.id === product.id);\r\n        if (!prevInventory || JSON.stringify(product) !== JSON.stringify(prevInventory.product)) {\r\n          const remainCount = prevInventory?.remainCount || 0;\r\n          const requiredCount = prevInventory?.requiredCount || 0;\r\n          return { product, remainCount, requiredCount };\r\n        }\r\n        return prevInventory;\r\n      });\r\n      this._productInventories = newInventory;\r\n    }\r\n  }\r\n}\r\n\r\nconst localStorage = new LocalStorage();\r\nexport default localStorage;\r\n","import { observer } from \"mobx-react\";\r\nimport React, { ReactElement, useEffect, useState } from \"react\";\r\nimport InventoryTable from \"../components/InventoryTable\";\r\nimport localStorage, { ProductInventory } from \"../localStorage\";\r\nimport update from \"immutability-helper\";\r\nimport { Button, ButtonGroup, IconButton, List, ListItem, ListItemText, ListSubheader, Modal, Snackbar } from \"@material-ui/core\";\r\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\r\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport \"./InventoryPage.scss\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\ninterface Props {\r\n  show: boolean;\r\n}\r\n\r\ninterface RowData extends ProductInventory {\r\n  name: string;\r\n}\r\n\r\nexport default observer(function InventoryPage({ show }: Props): ReactElement | null {\r\n  const [data, setData] = useState<RowData[]>(\r\n    localStorage.productInventories.map<RowData>((item) => ({ ...item, name: `${item.product.name}/${item.product.company}` }))\r\n  );\r\n\r\n  const [clipboardModalOpen, setClipboardModalOpen] = useState(false);\r\n  const [copySnackbarOpen, setCopySnackbarOpen] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setData(localStorage.productInventories.map<RowData>((item) => ({ ...item, name: `${item.product.name}/${item.product.company}` })));\r\n    return () => {};\r\n  }, [localStorage.products]);\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"inventory-page page\">\r\n      <div className=\"table-wrapper\">\r\n        <InventoryTable\r\n          getRowId={(data) => data.product.id.toString()}\r\n          columns={[\r\n            { Header: \"이름/업체\", accessor: \"name\", columnAlign: \"center\" },\r\n            {\r\n              Header: \"재고수량\",\r\n              accessor: \"remainCount\",\r\n              editType: \"number\",\r\n              columnAlign: \"center\",\r\n              getUnit: (cell) => {\r\n                return cell.row.original.product.unit;\r\n              },\r\n            },\r\n            {\r\n              Header: \"필요수량\",\r\n              accessor: \"requiredCount\",\r\n              editType: \"number\",\r\n              columnAlign: \"center\",\r\n              getUnit: (cell) => {\r\n                return cell.row.original.product.unit;\r\n              },\r\n            },\r\n          ]}\r\n          data={data}\r\n          onChange={(data) => {\r\n            setData(data);\r\n            localStorage.saveProductInventories(data);\r\n          }}\r\n          allowReordering={false}\r\n          allowRowDelete={false}\r\n        />\r\n      </div>\r\n      <ButtonGroup className=\"buttons\" color=\"primary\" variant=\"contained\">\r\n        <Button\r\n          startIcon={<RotateLeftIcon />}\r\n          onClick={() => {\r\n            const newData = data.map((item) => item);\r\n            for (let row of newData) {\r\n              row.remainCount = 0;\r\n              row.requiredCount = 0;\r\n            }\r\n            setData(newData);\r\n            localStorage.saveProductInventories(newData);\r\n          }}\r\n        >\r\n          초기화\r\n        </Button>\r\n        <Button\r\n          startIcon={<PlaylistAddIcon />}\r\n          onClick={() => {\r\n            setClipboardModalOpen(true);\r\n          }}\r\n        >\r\n          클립보드\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Modal\r\n        open={clipboardModalOpen}\r\n        onClose={() => {\r\n          setClipboardModalOpen(false);\r\n        }}\r\n      >\r\n        <Paper id=\"clipboard-modal\">\r\n          <CompanyClipboardList\r\n            data={data}\r\n            onCloseRequest={(showSnackbar) => {\r\n              if (showSnackbar) {\r\n                setCopySnackbarOpen(true);\r\n              }\r\n              setClipboardModalOpen(false);\r\n            }}\r\n          />\r\n        </Paper>\r\n      </Modal>\r\n      <Snackbar\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        open={copySnackbarOpen}\r\n        autoHideDuration={2000}\r\n        onClose={() => setCopySnackbarOpen(false)}\r\n        message=\"복사되었습니다!\"\r\n        action={\r\n          <React.Fragment>\r\n            <IconButton color=\"inherit\" onClick={() => setCopySnackbarOpen(false)}>\r\n              <CloseIcon />\r\n            </IconButton>\r\n          </React.Fragment>\r\n        }\r\n      />\r\n    </div>\r\n  );\r\n});\r\n\r\nfunction CompanyClipboardList({ data, onCloseRequest }: { data: ProductInventory[]; onCloseRequest: (showSnackbar: boolean) => void }) {\r\n  const companies = data.reduce<{ name: string; inventories: ProductInventory[] }[]>((prevValue, current) => {\r\n    let companyInventoreis = prevValue.find((item) => item.name === current.product.company);\r\n    if (!companyInventoreis) {\r\n      companyInventoreis = { name: current.product.company, inventories: [] };\r\n      prevValue.push(companyInventoreis);\r\n    }\r\n\r\n    if (current.requiredCount > 0) {\r\n      companyInventoreis.inventories.push(current);\r\n    }\r\n\r\n    return prevValue;\r\n  }, []);\r\n\r\n  return (\r\n    <List subheader={<ListSubheader component=\"div\">클립보드 복사</ListSubheader>}>\r\n      {companies.map((company, key) => {\r\n        return (\r\n          <ListItem\r\n            key={key}\r\n            button\r\n            disabled={company.inventories.length === 0}\r\n            onClick={() => {\r\n              copyToClickBoard(company.inventories);\r\n              onCloseRequest(true);\r\n            }}\r\n          >\r\n            <ListItemText primary={company.name} secondary={company.inventories.map((item) => `${item.product.name}(${item.requiredCount})`).join(\",\")} />\r\n          </ListItem>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n\r\nfunction copyToClickBoard(inventories: ProductInventory[]) {\r\n  copy(inventories.map((item) => `${item.product.name}\\t${item.requiredCount}`).join(\"\\n\"));\r\n}\r\n","import { observer } from \"mobx-react\";\r\nimport React, { ReactElement, useState } from \"react\";\r\nimport InventoryTable from \"../components/InventoryTable\";\r\nimport localStorage, { Product } from \"../localStorage\";\r\nimport update from \"immutability-helper\";\r\nimport { Button, ButtonGroup } from \"@material-ui/core\";\r\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\r\nimport PlaylistAddIcon from \"@material-ui/icons/PlaylistAdd\";\r\nimport SaveAltIcon from \"@material-ui/icons/SaveAlt\";\r\nimport { Paper } from \"@material-ui/core\";\r\n\r\ninterface Props {\r\n  show: boolean;\r\n}\r\n\r\nexport default observer(function SettingPage({ show }: Props): ReactElement | null {\r\n  const [data, setData] = useState<Product[]>(localStorage.products.map((item) => item));\r\n\r\n  if (!show) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <div className=\"table-wrapper\">\r\n        <InventoryTable\r\n          getRowId={(data) => data.id.toString()}\r\n          columns={[\r\n            { Header: \"이름\", accessor: \"name\", editType: \"string\", columnAlign: \"center\" },\r\n            { Header: \"업체\", accessor: \"company\", editType: \"string\", columnAlign: \"center\" },\r\n            { Header: \"단위\", accessor: \"unit\", editType: \"string\", columnAlign: \"center\" },\r\n          ]}\r\n          data={data}\r\n          onChange={(data) => setData(data)}\r\n        />\r\n      </div>\r\n      <ButtonGroup className=\"buttons\" color=\"primary\" variant=\"contained\">\r\n        <Button\r\n          startIcon={<RotateLeftIcon />}\r\n          onClick={() => {\r\n            setData(localStorage.products.map((item) => item));\r\n          }}\r\n        >\r\n          초기화\r\n        </Button>\r\n        <Button\r\n          startIcon={<PlaylistAddIcon />}\r\n          onClick={() => {\r\n            setData(update(data, { $push: [{ id: Date.now(), name: \"\", company: \"\", show: true, unit: \"\" }] }));\r\n          }}\r\n        >\r\n          행 추가\r\n        </Button>\r\n        <Button startIcon={<SaveAltIcon />} color=\"primary\" onClick={() => localStorage.saveProducts(data)}>\r\n          저장\r\n        </Button>\r\n      </ButtonGroup>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useState } from \"react\";\nimport \"./App.scss\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport BottomNavigation from \"@material-ui/core/BottomNavigation\";\nimport BottomNavigationAction from \"@material-ui/core/BottomNavigationAction\";\nimport Paper from \"@material-ui/core/Paper\";\nimport DataUsageIcon from \"@material-ui/icons/DataUsage\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport theme from \"./theme\";\nimport { OverridableComponent } from \"@material-ui/core/OverridableComponent\";\nimport { SvgIconTypeMap } from \"@material-ui/core\";\nimport InventoryPage from \"./containers/InventoryPage\";\nimport SettingPage from \"./containers/SettingPage\";\n\nfunction App() {\n  const [selectedTab, setSelectedTab] = useState<any>(tabs[0].title);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className=\"tab-page\">\n        {tabs.map((tab, key) => {\n          if (tab.component) {\n            return <tab.component key={key} show={tab.title === selectedTab} />;\n          }\n          return null;\n        })}\n      </div>\n      <Paper elevation={10}>\n        <BottomNavigation\n          value={selectedTab}\n          onChange={(e, value) => {\n            setSelectedTab(value as number);\n          }}\n          showLabels\n          className=\"bottom-nav\"\n        >\n          {tabs.map(({ title, icon: Icon }, key) => (\n            <BottomNavigationAction key={key} label={title} icon={<Icon />} value={title} />\n          ))}\n        </BottomNavigation>\n      </Paper>\n    </ThemeProvider>\n  );\n}\n\nconst tabs: { title: string; icon: OverridableComponent<SvgIconTypeMap<{}, \"svg\">>; component: React.ComponentClass<any> | React.FC<any> | null }[] = [\n  { title: \"재고관리\", icon: DataUsageIcon, component: InventoryPage },\n  { title: \"설정\", icon: SettingsIcon, component: SettingPage },\n];\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}